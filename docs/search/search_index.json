{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SeaPlayer","text":""},{"location":"#description","title":"Description","text":"<p>SeaPlayer is a player that works in the terminal.</p> <p>Supports the following audio file formats: <code>MP3</code>, <code>OGG</code>, <code>WAV</code>, <code>FLAC</code>, <code>MIDI</code>.</p> <p>Supports the following languages: <code>English</code>, <code>\u0420\u0443\u0441\u0441\u043a\u0438\u0439</code>, <code>\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430</code>.</p>"},{"location":"#screenshots","title":"Screenshots","text":""},{"location":"#using","title":"Using","text":"via <code>seaplayer</code>via <code>python -m</code> <pre><code>seaplayer\n</code></pre> <pre><code>python -m seaplayer\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install -U seaplayer\n</code></pre>"},{"location":"#playing-for-midi","title":"Playing for MIDI","text":"<p>In order to play MIDI files you need to install FluidSynth.</p>  Windows Ubuntu Arch Linux Mac OS <ul> <li>Download a zip file suitable for your version of Windows.</li> <li>Unpack the archive anywhere, but it is recommended to put it in a folder <code>C:\\Program Files\\FluidSynth</code></li> <li>Next, open <code>Settings</code> &gt; <code>System</code> &gt; <code>About the system</code> &gt; <code>Additional system parameters</code> &gt; <code>Environment variables</code> &gt; <code>[Double click on Path]</code> &gt; <code>Create</code> &gt; <code>[Enter the full path to the folder with FluidSynth]</code></li> <li>That's it, FluidSynth is installed!</li> </ul> <pre><code>sudo apt-get install fluidsynth\n</code></pre> <pre><code>sudo pacman -S fluidsynth\n</code></pre> FinkHomebrewMacPorts <pre><code>fink install fluidsynth\n</code></pre> <pre><code>brew install fluidsynth\n</code></pre> <pre><code>sudo port install fluidsynth\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"Version Date Tag Changelog v0.8.11 06.01.2024 STABLE - Fixed plugin <code>VKMusic</code> to v0.5.1- Fixed <code>Playback Control</code>- Fixed unvisibility <code>codec_name</code> v0.8.10 24.12.2023 DEPRECATED - Added new functions: <code>functions.awrap</code>- Added new types: <code>seaplayer.types.Enviroment</code>- Updated plugin <code>VKMusic</code> to v0.5.0- Updated plugin <code>RichDiscordStatus</code> to v0.2.2- Refactoting <code>Playback Update Loop</code>- Refactoring <code>Textual Actions</code>- Refactoring <code>seaplayer.tcss</code>- Refactoring <code>seaplayer.objects.MusicList</code> to <code>seaplayer.objects.PlayList</code>- Renamed variable <code>SeaPlayerConfig.log_menu_enabled</code> to <code>SeaPlayerConfig.logging</code>- Removed types: <code>seaplayer.types.MusicList</code>- Deprecated <code>seaplayer.objects.InputField</code> v0.8.9 21.12.2023 HOTFIX - Fixed is <code>TypeError</code> in <code>AnySound.from_url</code>- Update <code>VKMusic</code> plugin to v0.4.0 v0.8.8 21.12.2023 HOTFIX - Fixed critical error: TypeError: @deprecated decorator with non-None category must be applied to a class or callable, not  v0.8.7 21.12.2023 DEPRECATED - Added comments for documentation (not fully)- Added API documentation (not fully)- Removed <code>secrets</code>- Fixed documentation v0.8.6 17.12.2023 STABLE - Added new methods for <code>seaplayer.plug.pluginloader.PluginLoaderConfigManager</code>: remove_plugin &amp; remove_plugin_by_name_id- Added new command for <code>seaplug</code>: unload- Added version message for <code>seaplug</code>- Fixed typing for: <code>seaplayer.plug.pluginloader.PluginLoader.search_plugins_paths</code> &amp; <code>seaplayer.plug.pluginloader.PluginLoader.aio_search_plugins_paths</code>- Replaced option <code>--recreate</code> with <code>--overwrite</code> in <code>seaplayer.plug.cli.cli.creating</code>- Replaced option <code>--rewrite</code> with <code>--overwrite</code> in <code>seaplayer.plug.cli.cli.loading</code> v0.8.5 16.12.2023 STABLE - Added support for python3.8- Added <code>on_ready</code> abstract methods for plugins- Added new widgets: <code>PopUpWindow</code>, <code>WaitButton</code>- Fixed method <code>add_sounds_to_list</code>- Fixed <code>seaplayer.plug.cli</code>- Fixed <code>build.py</code>- Updated all child custom modules v0.8.4 11.12.2023 DEPRECATED - Added widgets: <code>Rheostat</code>, <code>ClickableLabel</code>- Added widget: Rheostat- Added a new widget: <code>PopUp</code>- Fixed all language- More attempts to make <code>Confiturate</code> screen clearer- Moved all <code>CSS</code> from <code>objects.tcss</code> to <code>DEFAULT_CSS</code> separately for each widget v0.8.3 10.12.2023 STABLE - Added plugin <code>VKMusic</code>- Added priority system for codecs- Added system handhers of value- Fixed <code>build.py</code>- Moved method <code>load_plugin_info</code> in <code>seaplayer.plug.pluginloader</code> v0.8.2 08.12.2023 STABLE - Added language merge (for translating plugins)- Fixed in translation files (<code>Log Menu Enable</code> -&gt; <code>Logging</code> )- Changed <code>object.css</code> (classes will no longer be used to specify standard properties)- Improved widget <code>FillLabel</code> v0.8.1 07.12.2023 STABLE - Revisioned of the LanguageLoader- Added new language: <code>\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430</code> v0.8.0 07.12.2023 STABLE - Added a new experimental <code>PopUp</code> widget (pop-up window)- Added new exception type <code>Error</code>- Added language loader system- Added full translate: English, \u0420\u0443\u0441\u0441\u043a\u0438\u0439- Added <code>changelog.md</code>- Added <code>secrets</code>- Added widgets: <code>DataRadioButton</code>, <code>ClikableButton</code> and <code>Rheostat (experemental)</code>- Fixed: <code>self.last_playback_status</code> not is int- Changed CSS for <code>LogMenu</code>- Updated <code>build.py</code>- Renamed <code>*.css</code> files to <code>.tcss</code>- Removing excess in <code>DataOptions</code> (from past updates)- Deprecated method <code>seaplayer.functions.check_status</code>- The first part of the attempts to make the <code>Configurate Screen</code> understandable to the average user v0.7.5 02.12.2023 STABLE - Updated the <code>Rich Discord Status</code> plugin (v0.2.1)- Updated the <code>PluginLoader</code> (v0.3.0)- Changed the backlight in the logs- Transferred some methods to <code>functions.py</code>- Removed excess (remaining from other updates) v0.7.4 01.12.2023 HOTFIX - Correction of errors in custom modules v0.7.3 01.12.2023 DEPRECATED - Added log on loading of <code>SeaPlayer</code>- Updated README.md- Updated dependencies- Updated class <code>Log</code>- Fixed the <code>NotAContainer</code> bug- Fixed CLI operation- Fixed the <code>pip install</code> startup error v0.7.2 29.11.2023 DEPRECATED - Added small optimizations v0.7.1 28.11.2023 DEPRECATED - Optimization due to more transplanting to a newer version of <code>playsoundsimple</code> v0.7.0 28.11.2023 DEPRECATED - Added installation of modules from a file <code>requirements.txt</code> in the folder of any plugin, if there is one- Added more intuitive logging"},{"location":"plugin-cli-home/","title":"Plugin CLI","text":""},{"location":"plugin-cli-home/#description","title":"Description","text":"<p>The CLI for managing plugins.</p>"},{"location":"plugin-cli-home/#using","title":"Using","text":"via <code>seaplug</code>via <code>python -m</code> <pre><code>seaplug [--init-config] [load/list/enable/disable/create] [OPTIONS]\n</code></pre> <pre><code>python -m seaplayer.plug [--init-config] [load/list/enable/disable/create] [OPTIONS]\n</code></pre>"},{"location":"plugin-cli-home/#commands","title":"Commands","text":""},{"location":"plugin-cli-home/#load","title":"Load","text":"<p>The command to load plugins.</p>  ConsoleOutput <pre><code>seaplug load [--overwrite/-o] ./plugins/ExamplePlugin\n</code></pre> <pre><code>Plugin loaded!\n</code></pre>"},{"location":"plugin-cli-home/#unload","title":"Unload","text":"<p>The command to unload plugins.</p>  ConsoleOutput <pre><code>seaplug unload seaplayer.plugins.example \n</code></pre> <pre><code>Plugin unloaded!\n</code></pre>"},{"location":"plugin-cli-home/#list","title":"List","text":"<p>List of all loaded plugins.</p>  ConsoleOutput <pre><code>seaplug list\n</code></pre> <pre><code>1. ExamplePlugin (seaplayer.plugins.example) v1.0.0 from Romanin (Disabled)\n</code></pre>"},{"location":"plugin-cli-home/#enable","title":"Enable","text":"<p>Enabling the plugin.</p>  ConsoleOutput <pre><code>seaplug enable seaplayer.plugins.example\n</code></pre> <pre><code>The 'seaplayer.plugins.example' plug-in is enabled.\"\n</code></pre>"},{"location":"plugin-cli-home/#disable","title":"Disable","text":"<p>Disabling the plugin.</p>  ConsoleOutput <pre><code>seaplug disable seaplayer.plugins.example\n</code></pre> <pre><code>The 'seaplayer.plugins.example' plug-in is disabled.\"\n</code></pre>"},{"location":"plugin-cli-home/#create","title":"Create","text":"<p>Create plugin environment. More information in Plugin Development.</p>  ConsoleOutput <pre><code>seaplug create [--name/--name-id/--version/--author/--description/--url/--overwrite] .\n</code></pre> <pre><code>The plugin directory has been created.\n</code></pre>"},{"location":"plugin-dev-home/","title":"Plugin Development","text":""},{"location":"plugin-dev-home/#description","title":"Description","text":"<p>Creation/Testing the plugin requires using the Plugin CLI.</p> <p>It is recommended to read it.</p> <p>Be sure to read the Plugin CLI guide.</p>"},{"location":"plugin-dev-home/#create-directory","title":"Create Directory","text":"<pre><code>mkdir ExamplePlugin\n</code></pre>"},{"location":"plugin-dev-home/#create-environment","title":"Create Environment","text":"<pre><code>seaplug create ExamplePlugin\n</code></pre> <p>The following file structure will be created: <pre><code>graph LR\n    A{ExamplePlugin} --&gt; B[__init__.py];\n    A{ExamplePlugin} --&gt; C[info.json];\n    A{ExamplePlugin} --&gt; D[requirements.txt];</code></pre></p> <p>About <code>requirements.txt</code></p> <p>The default file is <code>requirements.txt</code> it's not being created, you have to create it yourself if our plugin uses third-party modules.</p>"},{"location":"plugin-dev-home/#file-infojson","title":"File <code>info.json</code>","text":""},{"location":"plugin-dev-home/#source","title":"Source","text":"<p>This is just information about your plugin.</p> ExamplePlugin/info.json<pre><code>{\n    \"name\": \"ExamplePlugin\",\n    \"name_id\": \"seaplayer.plugins.example\",\n    \"version\": \"1.0.0\",\n    \"author\": \"Romanin\",\n    \"description\": null,    // optional\n    \"url\": null             // optional\n}\n</code></pre> <p>Very important!</p> <p>Think carefully about the <code>name_id</code>, because if it matches the <code>name_id</code> of another plugin, there may be a conflict when loading plugins.</p>"},{"location":"plugin-dev-home/#file-requirementstxt","title":"File <code>requirements.txt</code>","text":"<p>As mentioned above, the file <code>requirements.txt</code> it is not created after calling <code>seaplug create ExamplePlugin</code>, and it is recommended to create it only if your plugin has dependencies with other modules.</p>"},{"location":"plugin-dev-home/#source_1","title":"Source","text":"ExamplePlugin/requirements.txt<pre><code>module&gt;=version\n...\n</code></pre> <p>Nothing is difficult!</p> <p>File <code>requirements.txt</code> it is filled in according to the same principle as a regular file <code>requirements.txt</code> in Python. More information.</p>"},{"location":"plugin-dev-home/#file-__init__py","title":"File <code>__init__.py</code>","text":""},{"location":"plugin-dev-home/#source_2","title":"Source","text":"ExamplePlugin/__init.py__<pre><code>from seaplayer.plug import PluginBase\n\nclass Plugin(PluginBase):\n    pass\n\n__plugin__ = Plugin\n</code></pre> <p>Very important!</p> <p>You don't have to write everything in one <code>__init__.py</code>, the most important thing is that in <code>__init__.py</code>, there was a variable <code>__plugin__</code> containing a reference to the class.</p>"},{"location":"plugin-dev-home/#the-queue-for-launching-the-seaplayer","title":"The queue for launching the SeaPlayer","text":"<pre><code>graph LR\n    SP{SeaPlayer} --&gt; SP_RUN[SeaPlayer.run] --&gt; SP_COMPOSE[SeaPlayer.compose] --&gt; SP_ONREADY[SeaPlayer.on_ready];\n    SP{SeaPlayer} --&gt; SP_INIT[SeaPlayer.__init__];\n    SP_INIT[SeaPlayer.__init__] --&gt; PL_ONINIT[PluginLoader.on_init] --&gt; P_ONINIT[Plugin.on_init];\n    SP_INIT[SeaPlayer.__init__] --&gt; PL_INIT[PluginLoader.__init__];\n    PL_ONINIT[PluginLoader.on_init] --&gt; P_INIT[Plugin.__init__];\n    SP_RUN[SeaPlayer.run] --&gt; PL_ONRUN[PluginLoader.on_run] --&gt; P_ONRUN[Plugin.on_run];\n    SP_COMPOSE[SeaPlayer.compose] --&gt; PL_ONCOMPOSE[PluginLoader.on_compose] --&gt; P_ONCOMPOSE[Plugin.on_compose];\n    SP_ONREADY[SeaPlayer.on_ready] --&gt; PL_ONREADY[PluginLoader.on_ready] --&gt; P_ONREADY[Plugin.on_ready];</code></pre>"},{"location":"plugin-dev-home/#basic-usage","title":"Basic Usage","text":""},{"location":"plugin-dev-home/#method-on_init","title":"Method on_init","text":"<p>The method called immediately after initialization of the <code>SeaPlayer.__init__</code> class.</p> ExamplePlugin/__init.py__<pre><code>from seaplayer.plug import PluginBase\n\nclass Plugin(PluginBase):\n    def on_init(self) -&gt; None:\n        pass\n\n__plugin__ = Plugin\n</code></pre>"},{"location":"plugin-dev-home/#method-on_run","title":"Method on_run","text":"<p>This method is called during a call to the <code>SeaPlayer.run</code> function.</p> ExamplePlugin/__init.py__<pre><code>from seaplayer.plug import PluginBase\n\nclass Plugin(PluginBase):\n    def on_run(self) -&gt; None:\n        pass\n\n__plugin__ = Plugin\n</code></pre>"},{"location":"plugin-dev-home/#method-on_compose","title":"Method on_compose","text":"<p>This method is called after all the interface elements have been arranged <code>SeaPlayer.compose</code>.</p> <p>A nuance!</p> <p>It is also important to note that the function is launched via <code>SeaPlayer.run_worker</code>.</p> ExamplePlugin/__init.py__<pre><code>from seaplayer.plug import PluginBase\n\nclass Plugin(PluginBase):\n    async def on_compose(self) -&gt; None: ...\n        pass\n\n__plugin__ = Plugin\n</code></pre>"},{"location":"plugin-dev-home/#method-on_ready","title":"Method on_ready","text":"<p>The function called after the SeaPlayer is fully started <code>SeaPlayer.on_ready</code>.</p> ExamplePlugin/__init.py__<pre><code>class Plugin(PluginBase):\n    async def on_ready(self) -&gt; None: ...\n        pass\n</code></pre>"},{"location":"plugin-dev-home/#method-on_quit","title":"Method on_quit","text":"<p>Called when closing <code>SeaPlayer.on_quit</code>.</p> ExamplePlugin/__init.py__<pre><code>class Plugin(PluginBase):\n    async def on_quit(self) -&gt; None: ...\n        pass\n</code></pre>"},{"location":"api/","title":"Welcome to SeaPlayer API","text":"<p>\u041f\u0443\u0441\u0442\u043e</p>"},{"location":"api/codecbase/","title":"Codecbase","text":""},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase","title":"CodecBase","text":"<pre><code>CodecBase(path, **kwargs)\n</code></pre> <p>The base class of the codec.</p> Parameters Parameter Default Description <code>path</code> <code>str</code> required <p>File path (optional file path).</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.album","title":"album  <code>instance-attribute</code>","text":"<pre><code>album\n</code></pre> <p>The <code>album title</code> is taken from the metadata.</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.artist","title":"artist  <code>instance-attribute</code>","text":"<pre><code>artist\n</code></pre> <p>The <code>artist</code> is taken from the metadata.</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.bitrate","title":"bitrate  <code>instance-attribute</code>","text":"<pre><code>bitrate\n</code></pre> <p>The number of bits per second of playback (determines the sound quality).</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.channels","title":"channels  <code>instance-attribute</code>","text":"<pre><code>channels\n</code></pre> <p>The number of channels in the file.</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.codec_name","title":"codec_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>codec_name = 'None'\n</code></pre> <p>The name of the codec (abbreviation).</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.codec_priority","title":"codec_priority  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>codec_priority = 0.0\n</code></pre> <p>Sorting priority (the lower the value, the earlier it will be processed, checked for compatibility and initialized)</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.duration","title":"duration  <code>instance-attribute</code>","text":"<pre><code>duration\n</code></pre> <p>The duration of the sound in seconds.</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.hidden_name","title":"hidden_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hidden_name = False\n</code></pre> <p>Hide the <code>name</code> when displayed in the SeaPlayer.</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.icon_data","title":"icon_data  <code>instance-attribute</code>","text":"<pre><code>icon_data\n</code></pre> <p>A <code>poster</code> in bytes format is obtained from metadata.</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre> <p>File path (optional file path).</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.paused","title":"paused  <code>instance-attribute</code>","text":"<pre><code>paused\n</code></pre> <p>The playback status (<code>True if paused</code>).</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.playing","title":"playing  <code>instance-attribute</code>","text":"<pre><code>playing\n</code></pre> <p>The playback status (<code>True if playing</code>).</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.samplerate","title":"samplerate  <code>instance-attribute</code>","text":"<pre><code>samplerate\n</code></pre> <p>The sampling rate in hertz (Hz).</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title\n</code></pre> <p>The <code>title</code> of the sound is taken from the metadata.</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.__aio_sha1__","title":"__aio_sha1__  <code>async</code>","text":"<pre><code>__aio_sha1__(buffer_size)\n</code></pre> <p>Calculating the hash of the file.</p> Parameters Parameter Default Description <code>buffer_size</code> <code>int</code> required <p>The size of the temporary buffer.</p> Returns Name Type Description <code>str</code> <code>str</code> <p>SHA256 in string format.</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.__headrepr__","title":"__headrepr__","text":"<pre><code>__headrepr__()\n</code></pre> <p>The display name in the SeaPlayer.</p> Returns Name Type Description <code>str</code> <code>str</code> <p>Value <code>self.title</code> + <code>self.artist</code> the displayed in SeaPlayer.</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.__namerepr__","title":"__namerepr__","text":"<pre><code>__namerepr__()\n</code></pre> <p>The name that is displayed for the place <code>self.name</code>.</p> Returns Name Type Description <code>str</code> <code>str</code> <p>Value <code>self.name</code> the displayed in SeaPlayer.</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.__sha1__","title":"__sha1__","text":"<pre><code>__sha1__(buffer_size)\n</code></pre> <p>Calculating the hash of the file.</p> Parameters Parameter Default Description <code>buffer_size</code> <code>int</code> required <p>The size of the temporary buffer.</p> Returns Name Type Description <code>str</code> <code>str</code> <p>SHA256 in string format.</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.aio_is_this_codec","title":"aio_is_this_codec  <code>async</code> <code>staticmethod</code>","text":"<pre><code>aio_is_this_codec(path)\n</code></pre> <p>Compatibility check.</p> Parameters Parameter Default Description <code>path</code> <code>str</code> required <p>File path (optional file path).</p> Returns Name Type Description <code>bool</code> <code>bool</code> <p>True if compatible.</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.get_pos","title":"get_pos","text":"<pre><code>get_pos()\n</code></pre> <p>Getting the audio playback position in seconds.</p> Returns Name Type Description <code>float</code> <code>float</code> <p>The position of the audio playback in seconds.</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.get_volume","title":"get_volume","text":"<pre><code>get_volume()\n</code></pre> <p>Getting the current volume as a percentage.</p> Returns Name Type Description <code>float</code> <code>float</code> <p>Volume percentage (0.01 == 1%).</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.is_this_codec","title":"is_this_codec  <code>staticmethod</code>","text":"<pre><code>is_this_codec(path)\n</code></pre> <p>Compatibility check.</p> Parameters Parameter Default Description <code>path</code> <code>str</code> required <p>File path (optional file path).</p> Returns Name Type Description <code>bool</code> <code>bool</code> <p>True if compatible.</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.pause","title":"pause","text":"<pre><code>pause()\n</code></pre> <p>Put it on pause.</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.play","title":"play","text":"<pre><code>play()\n</code></pre> <p>Start playing the sound.</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.set_pos","title":"set_pos","text":"<pre><code>set_pos(value)\n</code></pre> <p>Setting the audio playback position in seconds.</p> Parameters Parameter Default Description <code>value</code> <code>float</code> required <p>The position of the audio playback in seconds.</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.set_volume","title":"set_volume","text":"<pre><code>set_volume(value)\n</code></pre> <p>Setting the volume value as a percentage.</p> Parameters Parameter Default Description <code>value</code> <code>float</code> required <p>Volume percentage (0.01 == 1%).</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop playing the sound.</p>"},{"location":"api/codecbase/#seaplayer.code\u0441base.CodecBase.unpause","title":"unpause","text":"<pre><code>unpause()\n</code></pre> <p>Take it off the pause.</p>"},{"location":"api/config/","title":"Config","text":""},{"location":"api/config/#seaplayer.config.DEFAULT_CONFIG_DATA","title":"DEFAULT_CONFIG_DATA  <code>module-attribute</code>","text":"<pre><code>DEFAULT_CONFIG_DATA = {\n    \"main.lang\": \"en-eng\",\n    \"sound.sound_font_path\": None,\n    \"sound.output_sound_device_id\": None,\n    \"image.image_update_method\": \"sync\",\n    \"image.image_resample_method\": \"bilinear\",\n    \"playback.rewind_count_seconds\": 5,\n    \"playback.volume_change_percent\": 0.05,\n    \"playback.max_volume_percent\": 2.0,\n    \"playlist.recursive_search\": False,\n    \"keys.quit\": \"q,\u0439\",\n    \"keys.rewind_forward\": \"*\",\n    \"keys.rewind_back\": \"/\",\n    \"keys.volume_up\": \"+\",\n    \"keys.volume_down\": \"-\",\n    \"debag.logging\": False,\n}\n</code></pre> <p>Default configuration values.</p>"},{"location":"api/config/#seaplayer.config.SeaPlayerConfig","title":"SeaPlayerConfig","text":"<pre><code>SeaPlayerConfig(\n    filepath, *, default_data=DEFAULT_CONFIG_DATA\n)\n</code></pre> <p>The main configuration class of the SeaPlayer.</p> Parameters Parameter Default Description <code>filepath</code> <code>str</code> required <p>The path to the configuration file.</p> <code>default_data</code> <code>Dict[str, Any]</code> <code>DEFAULT_CONFIG_DATA</code> <p>Default configuration values. Defaults to DEFAULT_CONFIG_DATA.</p>"},{"location":"api/config/#seaplayer.config.SeaPlayerConfig.image_resample_method","title":"image_resample_method  <code>property</code> <code>writable</code>","text":"<pre><code>image_resample_method\n</code></pre> <p>The image resampling method.</p> Returns Type Description <code>Literal['nearest', 'bilinear', 'bicubic', 'lanczos', 'hamming', 'box']</code> <p>The image resampling method.</p>"},{"location":"api/config/#seaplayer.config.SeaPlayerConfig.key_quit","title":"key_quit  <code>property</code> <code>writable</code>","text":"<pre><code>key_quit\n</code></pre> <p>The key to exit the SeaPlayer.</p> Returns Type Description <code>str</code> <p>The key char(s).</p>"},{"location":"api/config/#seaplayer.config.SeaPlayerConfig.key_rewind_back","title":"key_rewind_back  <code>property</code> <code>writable</code>","text":"<pre><code>key_rewind_back\n</code></pre> <p>The rewind back key.</p> Returns Type Description <code>str</code> <p>The key char(s).</p>"},{"location":"api/config/#seaplayer.config.SeaPlayerConfig.key_rewind_forward","title":"key_rewind_forward  <code>property</code> <code>writable</code>","text":"<pre><code>key_rewind_forward\n</code></pre> <p>The rewind forward key.</p> Returns Type Description <code>str</code> <p>The key char(s).</p>"},{"location":"api/config/#seaplayer.config.SeaPlayerConfig.key_volume_down","title":"key_volume_down  <code>property</code> <code>writable</code>","text":"<pre><code>key_volume_down\n</code></pre> <p>The volume down key.</p> Returns Type Description <code>str</code> <p>The key char(s).</p>"},{"location":"api/config/#seaplayer.config.SeaPlayerConfig.key_volume_up","title":"key_volume_up  <code>property</code> <code>writable</code>","text":"<pre><code>key_volume_up\n</code></pre> <p>The volume up key.</p> Returns Type Description <code>str</code> <p>The key char(s).</p>"},{"location":"api/config/#seaplayer.config.SeaPlayerConfig.lang","title":"lang  <code>property</code> <code>writable</code>","text":"<pre><code>lang\n</code></pre> <p>The current language.</p> Returns Type Description <code>Union[Literal['en-eng'], str]</code> <p>The file name without an extension.</p>"},{"location":"api/config/#seaplayer.config.SeaPlayerConfig.logging","title":"logging  <code>property</code> <code>writable</code>","text":"<pre><code>logging\n</code></pre> <p>Enabling and disabling logging.</p> Returns Type Description <code>bool</code> <p>On or off.</p>"},{"location":"api/config/#seaplayer.config.SeaPlayerConfig.max_volume_percent","title":"max_volume_percent  <code>property</code> <code>writable</code>","text":"<pre><code>max_volume_percent\n</code></pre> <p>Maximum volume value.</p> Returns Type Description <code>float</code> <p>Value 0.01 == 1%.</p>"},{"location":"api/config/#seaplayer.config.SeaPlayerConfig.output_sound_device_id","title":"output_sound_device_id  <code>property</code> <code>writable</code>","text":"<pre><code>output_sound_device_id\n</code></pre> <p>ID of the audio output device.</p> Returns Type Description <code>Optional[int]</code> <p>The device ID.</p>"},{"location":"api/config/#seaplayer.config.SeaPlayerConfig.recursive_search","title":"recursive_search  <code>property</code> <code>writable</code>","text":"<pre><code>recursive_search\n</code></pre> <p>Recursive file search.</p> Returns Type Description <code>bool</code> <p>On or off.</p>"},{"location":"api/config/#seaplayer.config.SeaPlayerConfig.rewind_count_seconds","title":"rewind_count_seconds  <code>property</code> <code>writable</code>","text":"<pre><code>rewind_count_seconds\n</code></pre> <p>The value of the seconds by which the current sound will be rewound.</p> Returns Type Description <code>int</code> <p>Rewind in seconds.</p>"},{"location":"api/config/#seaplayer.config.SeaPlayerConfig.sound_font_path","title":"sound_font_path  <code>property</code> <code>writable</code>","text":"<pre><code>sound_font_path\n</code></pre> <p>The path to the file with the audio font.</p> Returns Type Description <code>Optional[str]</code> <p>The full path to the file.</p>"},{"location":"api/config/#seaplayer.config.SeaPlayerConfig.volume_change_percent","title":"volume_change_percent  <code>property</code> <code>writable</code>","text":"<pre><code>volume_change_percent\n</code></pre> <p>Percentage by which the volume changes when the special keys are pressed.</p> Returns Type Description <code>float</code> <p>Value 0.01 == 1%.</p>"},{"location":"api/config/#seaplayer.config.SeaPlayerConfig.refresh","title":"refresh","text":"<pre><code>refresh()\n</code></pre> <p>Overwriting configurations to a file.</p>"},{"location":"api/exceptions/","title":"Exceptions","text":""},{"location":"api/exceptions/#seaplayer.exceptions.Error","title":"Error","text":"<pre><code>Error(*args, **kwargs)\n</code></pre> <p>             Bases: <code>Exception</code></p> <p>The base class of the error.</p>"},{"location":"api/exceptions/#seaplayer.exceptions.Error.__error_text__","title":"__error_text__","text":"<pre><code>__error_text__(*args, **kwargs)\n</code></pre> <p>Error text generator.</p> <p>Yields:</p> Type Description <code>Optional[str]</code> <p>Generator[Optional[str], Any, None]: Returns the error text.</p>"},{"location":"api/exceptions/#seaplayer.exceptions.LanguageNotExistError","title":"LanguageNotExistError","text":"<pre><code>LanguageNotExistError(*args, **kwargs)\n</code></pre> <p>             Bases: <code>Error</code></p> <p>The error class indicates that the translation file is missing.</p>"},{"location":"api/exceptions/#seaplayer.exceptions.LanguageNotLoadedError","title":"LanguageNotLoadedError","text":"<pre><code>LanguageNotLoadedError(*args, **kwargs)\n</code></pre> <p>             Bases: <code>Error</code></p> <p>The error class indicates an unloaded translation file.</p>"},{"location":"api/exceptions/#seaplayer.exceptions.NotBooleanError","title":"NotBooleanError","text":"<pre><code>NotBooleanError(data)\n</code></pre> <p>             Bases: <code>Exception</code></p> <p>Exception class indicating an error when converting data to <code>bool</code>.</p>"},{"location":"api/exceptions/#seaplayer.exceptions.PathNotExistsError","title":"PathNotExistsError","text":"<pre><code>PathNotExistsError(path)\n</code></pre> <p>             Bases: <code>Exception</code></p> <p>An exception class indicating the absence of a path.</p>"},{"location":"api/languages/","title":"Languages","text":""},{"location":"api/languages/#seaplayer.languages.Language","title":"Language","text":"<pre><code>Language(language_filepath)\n</code></pre> <p>The class reflects the file with the translation.</p> Parameters Parameter Default Description <code>language_filepath</code> <code>str</code> required <p>The path to the file with the translation.</p> Raises Type Description <code>FileNotFoundError</code> <p>It is called if the file with the translation does not exist.</p>"},{"location":"api/languages/#seaplayer.languages.Language.author","title":"author  <code>property</code>","text":"<pre><code>author\n</code></pre> <p>The author of the translation taken from the translation file.</p> Returns Type Description <code>str</code> <p>The author's nickname.</p>"},{"location":"api/languages/#seaplayer.languages.Language.author_url","title":"author_url  <code>property</code>","text":"<pre><code>author_url\n</code></pre> <p>The link to the author of the translation is taken from the translation file.</p> Returns Type Description <code>Optional[str]</code> <p>Link to the author.</p>"},{"location":"api/languages/#seaplayer.languages.Language.loaded","title":"loaded  <code>property</code>","text":"<pre><code>loaded\n</code></pre> <p>If <code>True</code>, then the file with the translation is fully loaded in memory.</p> Returns Type Description <code>bool</code> <p>If loaded, then <code>True</code>.</p>"},{"location":"api/languages/#seaplayer.languages.Language.mark","title":"mark  <code>property</code>","text":"<pre><code>mark\n</code></pre> <p>The name of the file without an extension.</p> Returns Type Description <code>str</code> <p>The name of the file without the extension.</p>"},{"location":"api/languages/#seaplayer.languages.Language.name","title":"name  <code>property</code>","text":"<pre><code>name\n</code></pre> <p>The path to the file with the translation.</p> Returns Type Description <code>str</code> <p>The full path to the file.</p>"},{"location":"api/languages/#seaplayer.languages.Language.title","title":"title  <code>property</code>","text":"<pre><code>title\n</code></pre> <p>The name of the translation language taken from the file.</p> Returns Type Description <code>str</code> <p>The purpose of the language.</p>"},{"location":"api/languages/#seaplayer.languages.Language.words","title":"words  <code>property</code>","text":"<pre><code>words\n</code></pre> <p>Special values that you need to have even if the language is not loaded.</p> Returns Type Description <code>Dict[str, str]</code> <p>Dictionary of special meanings.</p>"},{"location":"api/languages/#seaplayer.languages.Language.get","title":"get","text":"<pre><code>get(key, default=None)\n</code></pre> <p>Getting a line feed.</p> Parameters Parameter Default Description <code>key</code> <code>str</code> required <p>The key to the variable with the translation, which is registered in the file with the translation.</p> <code>default</code> <code>Optional[str]</code> <code>None</code> <p>The default value. Defaults to None.</p> Raises Type Description <code>LanguageNotLoadedError</code> <p>It is called if the translation file is not fully loaded into memory.</p> Returns Type Description <code>Optional[str]</code> <p>Optional[str]: The translated string.</p>"},{"location":"api/languages/#seaplayer.languages.Language.load","title":"load","text":"<pre><code>load()\n</code></pre> <p>Full load of the file with the translation in memory.</p>"},{"location":"api/languages/#seaplayer.languages.Language.unload","title":"unload","text":"<pre><code>unload()\n</code></pre> <p>Unload a file with a translation from memory.</p>"},{"location":"api/languages/#seaplayer.languages.LanguageLoader","title":"LanguageLoader","text":"<pre><code>LanguageLoader(\n    langs_dirpath,\n    main_lang_mark,\n    default_lang_mark=\"en-eng\",\n)\n</code></pre> <p>The loader of files with translation.</p> Parameters Parameter Default Description <code>langs_dirpath</code> <code>str</code> required <p>The path to the folder with the translation files.</p> <code>main_lang_mark</code> <code>str</code> required <p>The name of the file with the main translation without the extension.</p> <code>default_lang_mark</code> <code>str</code> <code>'en-eng'</code> <p>The name of the file with the default translation without an extension. Defaults to \"en-eng\".</p> Raises Type Description <code>FileNotFoundError</code> <p>Called if the file with the default translation without the extension could not be found.</p>"},{"location":"api/languages/#seaplayer.languages.LanguageLoader.alangs","title":"alangs  <code>property</code>","text":"<pre><code>alangs\n</code></pre> <p>Additional languages, for example, translation of plugins.</p> Returns Type Description <p>A list with an additional translation.</p>"},{"location":"api/languages/#seaplayer.languages.LanguageLoader.default_lang","title":"default_lang  <code>property</code>","text":"<pre><code>default_lang\n</code></pre> <p>An image of the <code>Language</code> class reflecting the uploaded file with the default translation.</p> Returns Type Description <code>Language</code> <p>The translation.</p>"},{"location":"api/languages/#seaplayer.languages.LanguageLoader.default_lang_mark","title":"default_lang_mark  <code>property</code>","text":"<pre><code>default_lang_mark\n</code></pre> <p>The name of the file with the default translation without an extension.</p> Returns Type Description <code>str</code> <p>The file name without an extension.</p>"},{"location":"api/languages/#seaplayer.languages.LanguageLoader.langs","title":"langs  <code>property</code>","text":"<pre><code>langs\n</code></pre> <p>A list with images of the <code>Language</code> class, reflecting the files found in the folder with the translation files.</p> Returns Type Description <code>List[Language]</code> <p>A list with translations.</p>"},{"location":"api/languages/#seaplayer.languages.LanguageLoader.main_lang","title":"main_lang  <code>property</code>","text":"<pre><code>main_lang\n</code></pre> <p>An image of the <code>Language</code> class reflecting the uploaded file with the main translation.</p> Returns Type Description <code>Optional[Language]</code> <p>The translation or <code>None</code>.</p>"},{"location":"api/languages/#seaplayer.languages.LanguageLoader.main_lang_mark","title":"main_lang_mark  <code>property</code>","text":"<pre><code>main_lang_mark\n</code></pre> <p>The name of the file with the main translation without the extension.</p> Returns Type Description <code>str</code> <p>The file name without an extension.</p>"},{"location":"api/languages/#seaplayer.languages.LanguageLoader.name","title":"name  <code>property</code>","text":"<pre><code>name\n</code></pre> <p>The path to the folder with the translation files.</p> Returns Type Description <code>str</code> <p>The full path to the file.</p>"},{"location":"api/languages/#seaplayer.languages.LanguageLoader.get","title":"get","text":"<pre><code>get(key)\n</code></pre> <p>First, it tries to get the translation from the file with the main translation, if it failed, it tries to get it from the file with the default translation, if it failed again, it tries to get them from additional languages (<code>self.alangs</code>). If in the end None is still output, then returns the string <code>\"&lt;LTNF&gt;\"</code>, that is, the <code>Language Text Not Found</code>.</p> Parameters Parameter Default Description <code>key</code> <code>str</code> required <p>The key to the variable with the translation, which is registered in the file with the translation.</p> Returns Name Type Description <code>str</code> <code>str</code> <p>The translated string.</p>"},{"location":"api/languages/#seaplayer.languages.LanguageLoader.merge","title":"merge","text":"<pre><code>merge(ll)\n</code></pre> <p>Adding additional languages (<code>self.alangs</code>).</p> Parameters Parameter Default Description <code>ll</code> <code>LanguageLoader</code> required <p>The image of the <code>LanguageLoader</code> class.</p>"},{"location":"api/pluginbase/","title":"PluginBase","text":""},{"location":"api/pluginbase/#seaplayer.plug.pluginbase.PluginBase","title":"PluginBase","text":"<pre><code>PluginBase(app, pl, info)\n</code></pre> <p>The base class of the plugin.</p> Parameters Parameter Default Description <code>app</code> <code>SeaPlayer</code> required <p>A link to the image of the <code>SeaPlayer</code> class.</p> <code>pl</code> <code>PluginLoader</code> required <p>A link to the image of the <code>PluginLoader</code> class.</p> <code>info</code> <code>PluginInfo</code> required <p>Contains all variables from <code>info.json</code>.</p>"},{"location":"api/pluginbase/#seaplayer.plug.pluginbase.PluginBase.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre> <p>A link to the image of the <code>SeaPlayer</code> class.</p>"},{"location":"api/pluginbase/#seaplayer.plug.pluginbase.PluginBase.info","title":"info  <code>instance-attribute</code>","text":"<pre><code>info = info\n</code></pre> <p>Contains all variables from <code>info.json</code>.</p>"},{"location":"api/pluginbase/#seaplayer.plug.pluginbase.PluginBase.pl","title":"pl  <code>instance-attribute</code>","text":"<pre><code>pl = pl\n</code></pre> <p>A link to the image of the <code>PluginLoader</code> class.</p>"},{"location":"api/pluginbase/#seaplayer.plug.pluginbase.PluginBase.__init_repr__","title":"__init_repr__","text":"<pre><code>__init_repr__()\n</code></pre> <p>The string that is output to the logs after initialization of the class.</p> Returns Name Type Description <code>str</code> <code>str</code> <p>A string indicating the initialization of the class.</p>"},{"location":"api/pluginbase/#seaplayer.plug.pluginbase.PluginBase.add_codecs","title":"add_codecs","text":"<pre><code>add_codecs(*codecs)\n</code></pre> <p>Adding codecs.</p>"},{"location":"api/pluginbase/#seaplayer.plug.pluginbase.PluginBase.add_value_handlers","title":"add_value_handlers","text":"<pre><code>add_value_handlers(*handlers)\n</code></pre> <p>Adding handlers for user-entered values.</p>"},{"location":"api/pluginbase/#seaplayer.plug.pluginbase.PluginBase.install_screen","title":"install_screen","text":"<pre><code>install_screen(name, screen)\n</code></pre> <p>Adding a new <code>Screen</code>.</p> Parameters Parameter Default Description <code>name</code> <code>str</code> required <p>The name by which it will be accessed by SeaPlayer.</p> <code>screen</code> <code>Screen</code> required <p>The image of the <code>Screen</code> class.</p>"},{"location":"api/pluginbase/#seaplayer.plug.pluginbase.PluginBase.on_bindings","title":"on_bindings","text":"<pre><code>on_bindings()\n</code></pre> <p>A generator for binding information classes about keys.</p> <p>Yields:</p> Type Description <code>Binding</code> <p>Generator[Binding, Any, None]: A class with information about key bindings.</p>"},{"location":"api/pluginbase/#seaplayer.plug.pluginbase.PluginBase.on_compose","title":"on_compose  <code>async</code>","text":"<pre><code>on_compose()\n</code></pre> <p>A function called after initializing the SeaPlayer widgets.</p>"},{"location":"api/pluginbase/#seaplayer.plug.pluginbase.PluginBase.on_init","title":"on_init","text":"<pre><code>on_init()\n</code></pre> <p>A function called during the initialization of the SeaPlayer.</p>"},{"location":"api/pluginbase/#seaplayer.plug.pluginbase.PluginBase.on_quit","title":"on_quit  <code>async</code>","text":"<pre><code>on_quit()\n</code></pre> <p>The function starts after sending a signal to close the SeaPlayer.</p>"},{"location":"api/pluginbase/#seaplayer.plug.pluginbase.PluginBase.on_ready","title":"on_ready  <code>async</code>","text":"<pre><code>on_ready()\n</code></pre> <p>The function starts immediately after the SeaPlayer is fully launched.</p>"},{"location":"api/pluginbase/#seaplayer.plug.pluginbase.PluginBase.on_run","title":"on_run","text":"<pre><code>on_run()\n</code></pre> <p>A function called before launching SeaPlayer.</p>"},{"location":"api/pluginloader/","title":"PluginLoader","text":""},{"location":"api/pluginloader/#seaplayer.plug.pluginloader.PluginLoader","title":"PluginLoader","text":"<pre><code>PluginLoader(\n    app, plugins_dirpath=None, plugins_config_path=None\n)\n</code></pre>"},{"location":"api/pluginloader/#seaplayer.plug.pluginloader.PluginLoader.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre> <p>A link to the image of the <code>SeaPlayer</code> class.</p>"},{"location":"api/pluginloader/#seaplayer.plug.pluginloader.PluginLoader.error_plugins","title":"error_plugins  <code>instance-attribute</code>","text":"<pre><code>error_plugins = []\n</code></pre> <p>A list with plugins (more precisely, with the paths to them) that could not be loaded.</p>"},{"location":"api/pluginloader/#seaplayer.plug.pluginloader.PluginLoader.off_plugins","title":"off_plugins  <code>instance-attribute</code>","text":"<pre><code>off_plugins = []\n</code></pre> <p>A list with disabled plugins (more precisely, with information about them).</p>"},{"location":"api/pluginloader/#seaplayer.plug.pluginloader.PluginLoader.on_plugins","title":"on_plugins  <code>instance-attribute</code>","text":"<pre><code>on_plugins = []\n</code></pre> <p>A list with initialized plugin classes.</p>"},{"location":"api/pluginloader/#seaplayer.plug.pluginloader.PluginLoader.plugins_config_path","title":"plugins_config_path  <code>instance-attribute</code>","text":"<pre><code>plugins_config_path = Path(\n    os.path.abspath(\n        plugins_config_path or PLUGINS_CONFIG_PATH\n    )\n)\n</code></pre> <p>The path to the plugin loader configuration file.</p>"},{"location":"api/pluginloader/#seaplayer.plug.pluginloader.PluginLoader.plugins_dirpath","title":"plugins_dirpath  <code>instance-attribute</code>","text":"<pre><code>plugins_dirpath = Path(\n    os.path.abspath(plugins_dirpath or PLUGINS_DIRPATH)\n)\n</code></pre> <p>The path to the plugin folder.</p>"},{"location":"api/pluginloader/#seaplayer.plug.pluginloader.PluginLoaderConfigManager","title":"PluginLoaderConfigManager","text":"<pre><code>PluginLoaderConfigManager(path)\n</code></pre>"},{"location":"api/pluginloader/#seaplayer.plug.pluginloader.PluginLoaderConfigManager.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config = self.load(self.filepath, default_data)\n</code></pre> <p>Contains attributes from the plugin configuration file.</p>"},{"location":"api/pluginloader/#seaplayer.plug.pluginloader.PluginLoaderConfigManager.filepath","title":"filepath  <code>instance-attribute</code>","text":"<pre><code>filepath = Path(path)\n</code></pre> <p>The path to the plugin configuration file.</p>"},{"location":"api/pluginloader/#seaplayer.plug.pluginloader.PluginLoaderConfigManager.dump","title":"dump  <code>staticmethod</code>","text":"<pre><code>dump(path, data)\n</code></pre> <p>Overwriting configurations.</p> Parameters Parameter Default Description <code>path</code> <code>str</code> required <p>The path to the plugin configuration file.</p> <code>data</code> <code>PluginLoaderConfigModel</code> required <p>Contains attributes from the plugin configuration file.</p>"},{"location":"api/pluginloader/#seaplayer.plug.pluginloader.PluginLoaderConfigManager.load","title":"load  <code>staticmethod</code>","text":"<pre><code>load(path, default_data)\n</code></pre> <p>Loading configurations.</p> Parameters Parameter Default Description <code>path</code> <code>str</code> required <p>The path to the plugin configuration file.</p> <code>default_data</code> <code>Dict[str, Any]</code> required <p>The standard values of the configuration file.</p> Returns Name Type Description <code>PluginLoaderConfigModel</code> <code>PluginLoaderConfigModel</code> <p>Contains attributes from the plugin configuration file.</p>"},{"location":"api/seaplayer/","title":"SeaPlayer","text":""},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer","title":"SeaPlayer","text":"<pre><code>SeaPlayer(*args, **kwargs)\n</code></pre> <p>             Bases: <code>App</code></p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.cache","title":"cache  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cache = Cacher(CACHE_DIRPATH)\n</code></pre> <p>An image of a class for caching variables.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.config","title":"config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>config = SeaPlayerConfig(CONFIG_FILEPATH)\n</code></pre> <p>The image of the SeaPlayer configuration file.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.currect_sound","title":"currect_sound  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>currect_sound = None\n</code></pre> <p>The currently selected sound.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.currect_sound_index","title":"currect_sound_index  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>currect_sound_index = None\n</code></pre> <p>The index of the currently selected sound.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.currect_volume","title":"currect_volume  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>currect_volume = cache.var('currect_volume', 1.0)\n</code></pre> <p>The current volume value (cached).</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.ll","title":"ll  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ll = LanguageLoader(LANGUAGES_DIRPATH, config.lang)\n</code></pre> <p>An image of the class for receiving the loaded SeaPlayer translation. With the translation uploaded from the <code>seaplayer/langs/</code> directory.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.playback_mode","title":"playback_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>playback_mode = cache.var('playback_mode', 0)\n</code></pre> <p>The current playback mode (cached).</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.action_quit","title":"action_quit  <code>async</code>","text":"<pre><code>action_quit()\n</code></pre> <p>The function called by our when the SeaPlayer stops working.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.aio_callnofy","title":"aio_callnofy  <code>async</code>","text":"<pre><code>aio_callnofy(text, dosk='top')\n</code></pre> <p>Creating a notification.</p> Parameters Parameter Default Description <code>text</code> <code>str</code> required <p>The text of the notification.</p> <code>dosk</code> <code>Literal['bottom', 'left', 'right', 'top']</code> <code>'top'</code> <p>Regarding the screen. Defaults to \"top\".</p> Returns Name Type Description <code>CallNofy</code> <code>CallNofy</code> <p>To delete the notification image, use the <code>CallNofy.remove()</code> method.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.aio_gcs","title":"aio_gcs  <code>async</code>","text":"<pre><code>aio_gcs()\n</code></pre> <p>Getting the currently selected sound.</p> Returns Type Description <code>Optional[CodecBase]</code> <p>Optional[CodecBase]: The image of the codec in which the sound is wrapped.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.aio_get_sound_selected_label_text","title":"aio_get_sound_selected_label_text  <code>async</code>","text":"<pre><code>aio_get_sound_selected_label_text(sound=None)\n</code></pre> <p>Generating a string for <code>self.music_selected_label</code>.</p> Parameters Parameter Default Description <code>sound</code> <code>Optional[CodecBase]</code> <code>None</code> <p>The image of the code\u0441 in which the sound is wrapped. Defaults to None.</p> Returns Name Type Description <code>str</code> <code>str</code> <p>String for <code>self.music_selected_label</code>.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.aio_nofy","title":"aio_nofy  <code>async</code>","text":"<pre><code>aio_nofy(text, life_time=3, dosk='top')\n</code></pre> <p>Creating a temporary notification.</p> Parameters Parameter Default Description <code>text</code> <code>str</code> required <p>The text of the notification.</p> <code>life_time</code> <code>float</code> <code>3</code> <p>The time in seconds after which the notification will disappear. Defaults to 3.</p> <code>dosk</code> <code>Literal['bottom', 'left', 'right', 'top']</code> <code>'top'</code> <p>Regarding the screen. Defaults to \"top\".</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.aio_update_currect_sound","title":"aio_update_currect_sound  <code>async</code>","text":"<pre><code>aio_update_currect_sound()\n</code></pre> <p>Updating local variables of the current sound.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.aio_update_select_image","title":"aio_update_select_image  <code>async</code>","text":"<pre><code>aio_update_select_image(sound)\n</code></pre> <p>Forced image update.</p> Parameters Parameter Default Description <code>sound</code> <code>Optional[CodecBase]</code> required <p>The current sound.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.aio_update_select_label","title":"aio_update_select_label  <code>async</code>","text":"<pre><code>aio_update_select_label(sound=None)\n</code></pre> <p>Updating the string in <code>self.music_selected_label</code>.</p> Parameters Parameter Default Description <code>sound</code> <code>Optional[CodecBase]</code> <code>None</code> <p>The image of the code\u0441 in which the sound is wrapped. Defaults to None.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.callnofy","title":"callnofy","text":"<pre><code>callnofy(text, dosk='top')\n</code></pre> <p>Creating a notification.</p> Parameters Parameter Default Description <code>text</code> <code>str</code> required <p>The text of the notification.</p> <code>dosk</code> <code>Literal['bottom', 'left', 'right', 'top']</code> <code>'top'</code> <p>Regarding the screen. Defaults to \"top\".</p> Returns Name Type Description <code>CallNofy</code> <code>CallNofy</code> <p>To delete the notification image, use the <code>CallNofy.remove()</code> method.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.currect_sound_pause","title":"currect_sound_pause  <code>async</code>","text":"<pre><code>currect_sound_pause(sound=None)\n</code></pre> <p>Pauses the currently selected sound.</p> Parameters Parameter Default Description <code>sound</code> <code>Optional[CodecBase]</code> <code>None</code> <p>\u0421urrently selected sound. Defaults to None.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.currect_sound_play","title":"currect_sound_play  <code>async</code>","text":"<pre><code>currect_sound_play(sound=None)\n</code></pre> <p>Plays playback of the currently selected sound.</p> Parameters Parameter Default Description <code>sound</code> <code>Optional[CodecBase]</code> <code>None</code> <p>\u0421urrently selected sound. Defaults to None.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.currect_sound_stop","title":"currect_sound_stop  <code>async</code>","text":"<pre><code>currect_sound_stop(sound=None)\n</code></pre> <p>Stops playback of the currently selected sound.</p> Parameters Parameter Default Description <code>sound</code> <code>Optional[CodecBase]</code> <code>None</code> <p>\u0421urrently selected sound. Defaults to None.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.currect_sound_unpause","title":"currect_sound_unpause  <code>async</code>","text":"<pre><code>currect_sound_unpause(sound=None)\n</code></pre> <p>Unpauses the currently selected sound.</p> Parameters Parameter Default Description <code>sound</code> <code>Optional[CodecBase]</code> <code>None</code> <p>\u0421urrently selected sound. Defaults to None.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.gcs","title":"gcs","text":"<pre><code>gcs()\n</code></pre> <p>Getting the currently selected sound.</p> Returns Type Description <code>Optional[CodecBase]</code> <p>Optional[CodecBase]: The image of the codec in which the sound is wrapped.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.get_sound_selected_label_text","title":"get_sound_selected_label_text","text":"<pre><code>get_sound_selected_label_text(sound=None)\n</code></pre> <p>Generating a string for <code>self.music_selected_label</code>.</p> Parameters Parameter Default Description <code>sound</code> <code>Optional[CodecBase]</code> <code>None</code> <p>The image of the code\u0441 in which the sound is wrapped. Defaults to None.</p> Returns Name Type Description <code>str</code> <code>str</code> <p>String for <code>self.music_selected_label</code>.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.get_sound_tstatus","title":"get_sound_tstatus","text":"<pre><code>get_sound_tstatus(sound)\n</code></pre> <p>Getting the audio status in text format in the language selected by the user.</p> Parameters Parameter Default Description <code>sound</code> <code>CodecBase</code> required <p>The image of the code\u0441 in which the sound is wrapped.</p> Returns Name Type Description <code>str</code> <code>str</code> <p>Audio status in text format in the language selected by the user.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.nofy","title":"nofy","text":"<pre><code>nofy(text, life_time=3, dosk='top')\n</code></pre> <p>Creating a temporary notification.</p> Parameters Parameter Default Description <code>text</code> <code>str</code> required <p>The text of the notification.</p> <code>life_time</code> <code>float</code> <code>3</code> <p>The time in seconds after which the notification will disappear. Defaults to 3.</p> <code>dosk</code> <code>Literal['bottom', 'left', 'right', 'top']</code> <code>'top'</code> <p>Regarding the screen. Defaults to \"top\".</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.on_ready","title":"on_ready","text":"<pre><code>on_ready(*args, **kwargs)\n</code></pre> <p>A function called when the SeaPlayer is completely confused.</p>"},{"location":"api/seaplayer/#seaplayer.seaplayer.SeaPlayer.update_select_label","title":"update_select_label","text":"<pre><code>update_select_label(sound=None)\n</code></pre> <p>Updating the string in <code>self.music_selected_label</code>.</p> Parameters Parameter Default Description <code>sound</code> <code>Optional[CodecBase]</code> <code>None</code> <p>The image of the code\u0441 in which the sound is wrapped. Defaults to None.</p>"},{"location":"api/types/","title":"Types","text":""},{"location":"api/types/#seaplayer.types.Cache.Cacher","title":"Cacher","text":"<pre><code>Cacher(cache_dirpath)\n</code></pre> <p>The caching management class.</p> Parameters Parameter Default Description <code>cache_dirpath</code> <code>str</code> required <p>The path to the directory with the cache.</p>"},{"location":"api/types/#seaplayer.types.Cache.Cacher.var","title":"var","text":"<pre><code>var(name, default, *, group='main')\n</code></pre> <p>Caching a variable, wraps the value of the variable in <code>property</code> and saves it when the value is changed, and the next time SeaPlayer is started, the value is loaded from the cache.</p> Parameters Parameter Default Description <code>name</code> <code>str</code> required <p>The name of the cached variable.</p> <code>default</code> <code>D</code> required <p>The default value of the variable.</p> <code>group</code> <code>str</code> <code>'main'</code> <p>A group of variables. Defaults to \"main\".</p> Returns Name Type Description <code>D</code> <code>D</code> <p>Returns <code>property</code>, but as part of convenience, typing has been done that says that the same type that was set is returned.</p>"},{"location":"api/types/#seaplayer.types.Convert.Converter","title":"Converter","text":"<pre><code>Converter(*args, **kwargs)\n</code></pre> <p>A class for converting values entered by the user.</p>"},{"location":"api/types/#seaplayer.types.Convert.Converter.boolean","title":"boolean  <code>staticmethod</code>","text":"<pre><code>boolean(value)\n</code></pre> <p>Converting to <code>bool</code>.</p>"},{"location":"api/types/#seaplayer.types.Convert.Converter.filepath","title":"filepath  <code>staticmethod</code>","text":"<pre><code>filepath(value)\n</code></pre> <p>Check if there is a file on the path.</p> Parameters Parameter Default Description <code>value</code> <code>str</code> required <p>The value entered by the user.</p> Raises Type Description <code>PathNotExistsError</code> <p>Called if the path does not point to a non-existent file.</p> Returns Name Type Description <code>str</code> <code>str</code> <p>The path to the file.</p>"},{"location":"api/types/#seaplayer.types.Convert.Converter.optional","title":"optional  <code>staticmethod</code>","text":"<pre><code>optional(tp)\n</code></pre> <p>This is a type or function decorator for converting a value.</p>"},{"location":"api/types/#seaplayer.types.Convert.Converter.path","title":"path  <code>staticmethod</code>","text":"<pre><code>path(value)\n</code></pre> <p>Checking the existence of a <code>path</code>.</p> Parameters Parameter Default Description <code>value</code> <code>str</code> required <p>The value entered by the user.</p> Raises Type Description <code>PathNotExistsError</code> <p>Called if the path does not point to a non-existent file or directory.</p> Returns Name Type Description <code>str</code> <code>str</code> <p>The path to the file or directory.</p>"}]}